package HomeWork1;

/**
 * Интерфейс для реализации ассоциативного массива.
 * Мапа представляет собой структуру данных, которая хранит пары "ключ-значение"
 * и обеспечивает быстрый доступ к значениям по их ключам.
 *
 * @param <K> тип ключей, поддерживаемых этой мапой
 * @param <V> тип значений, хранящихся в этой мапе
 */
public interface MyMap<K, V> {
    /**
     * Добавляет пару ключ-значение в мапу.
     * Если ключ уже существует в мапе, его значение заменяется на новое.
     *
     * @param key   ключ, с которым будет связано указанное значение
     * @param value значение, которое будет связано с указанным ключом
     * @return предыдущее значение, связанное с ключом, или {@code null},
     * если ключ ранее не существовал в мапе
     */
    V put(K key, V value);

    /**
     * Возвращает значение, связанное с указанным ключом.
     *
     * @param key ключ, значение которого нужно вернуть
     * @return значение, связанное с указанным ключом, или {@code null},
     * если ключ не найден в мапе
     */
    V get(K key);

    /**
     * Удаляет пару ключ-значение для указанного ключа из мапы.
     *
     * @param key ключ, пару которого нужно удалить
     * @return значение, которое было связано с удаленным ключом, или {@code null},
     * если ключ не найден в мапе
     */
    V remove(K key);

    /**
     * Проверяет наличие указанного ключа в карте.
     *
     * @param key ключ, наличие которого нужно проверить
     * @return {@code true} если мапа содержит указанный ключ,
     * {@code false} в противном случае
     */
    boolean containsKey(K key);

    /**
     * Проверяет, пуста ли мапа.
     *
     * @return {@code true} если мапа не содержит ни одной пары ключ-значение,
     * {@code false} в противном случае
     */
    boolean isEmpty();

    /**
     * Возвращает количество пар ключ-значение в мапе.
     *
     * @return количество элементов в мапе
     */
    int size();

    /**
     * Удаляет все пары ключ-значение из мапы.
     * После вызова этого метода мапа становится пустой.
     */
    void clear();
}